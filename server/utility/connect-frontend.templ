package serverUtility

import (
	"Gooo/helpers/gooo"
	"context"
	"encoding/json"
	"log"
	"os"
	"strings"
)

// ManifestEntry represents a single entry in the Vite manifest
type ManifestEntry struct {
	File    string   `json:"file"`
	Name    string   `json:"name"`
	Src     string   `json:"src"`
	IsEntry bool     `json:"isEntry"`
	Imports []string `json:"imports"`
}

// ConnectFrontend inserts a script tag for connecting the frontend.
// Parameters:
//   - src: The source URL of the script. Must point to the generated JavaScript file.
//
// Example:
//   @serverUtility.ConnectFrontend("/gen/js/home.js")
templ ConnectFrontend(src string) {
	<script type="module" data-page-script src={ getHashedAssetPath(src, ctx) }></script>
}

// manifestCache caches the parsed manifest to avoid repeated file reads
var manifestCache map[string]string

// getHashedAssetPath reads the manifest to return the hashed filename
func getHashedAssetPath(originalPath string, ctx context.Context) string {
	log.Printf("Manifest cache: %v", manifestCache)
	if !gooo.IsLocal(ctx) {
		// Add logic here if needed for non-local environments
	}

	if manifestCache == nil {
		manifestCache = loadManifest()
	}
	if hashedPath, ok := manifestCache[originalPath]; ok {
		return hashedPath
	}
	log.Printf("Warning: No hashed path found for %s, using original", originalPath)
	return originalPath // Fallback if not found
}

// loadManifest reads and parses the Vite manifest.json
func loadManifest() map[string]string {
	file, err := os.ReadFile("gen/.vite/manifest.json") // Corrected path
	if err != nil {
		log.Printf("Warning: Could not load manifest: %v", err)
		return make(map[string]string)
	}
	var manifest map[string]ManifestEntry
	if err := json.Unmarshal(file, &manifest); err != nil {
		log.Printf("Warning: Could not parse manifest: %v", err)
		return make(map[string]string)
	}
	result := make(map[string]string)
	for srcPath, entry := range manifest {
		if entry.IsEntry {
			// Derive the served path from the source path (e.g., "client/home.ts" -> "/gen/js/home.js")
			servedPath := "/gen/js/" + strings.TrimPrefix(strings.TrimSuffix(srcPath, ".ts"), "client/") + ".js"
			hashedPath := "/gen/" + entry.File // e.g., "/gen/js/home.-48JG4rj.js"
			result[servedPath] = hashedPath
		}
	}
	return result
}
