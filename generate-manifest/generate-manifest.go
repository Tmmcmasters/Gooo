package main

import (
	"encoding/json"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type ManifestEntry struct {
	File    string   `json:"file"`
	Name    string   `json:"name"`
	Src     string   `json:"src"`
	IsEntry bool     `json:"isEntry"`
	Imports []string `json:"imports"`
}

func main() {
	// Get the project root (assuming script is run from root or adjust based on context)
	rootDir, err := os.Getwd()
	if err != nil {
		log.Fatalf("Failed to get working directory: %v", err)
	}

	// Read manifest.json
	manifestPath := filepath.Join(rootDir, "gen", ".vite", "manifest.json")
	file, err := os.ReadFile(manifestPath)
	if err != nil {
		log.Fatalf("Failed to read manifest: %v", err)
	}

	var manifest map[string]ManifestEntry
	if err := json.Unmarshal(file, &manifest); err != nil {
		log.Fatalf("Failed to parse manifest: %v", err)
	}

	// Build the cache map
	cache := make(map[string]string)
	for srcPath, entry := range manifest {
		if entry.IsEntry {
			// Derive the served path from the source path (e.g., "client/home.ts" -> "/gen/js/home.js")

			servedPath := "/gen/js/" + strings.TrimPrefix(strings.TrimSuffix(srcPath, ".ts"), "client/") + ".js"
			if strings.Contains(srcPath, "goooNavigation") {
				servedPath = "/gen/js/goooNavigation.js"
			}
			hashedPath := "/gen/" + entry.File // e.g., "/gen/js/home.-48JG4rj.js"
			cache[servedPath] = hashedPath
		}
	}

	// Template for the generated Go file
	const tmpl = `// Code generated by generate_manifest.go; DO NOT EDIT.
package serverGenerated

// manifestCache is the pre-generated manifest cache
var ManifestCache = map[string]string{
{{range $key, $value := .}}
	"{{$key}}": "{{$value}}",
{{end}}
}
`

	t, err := template.New("manifest").Parse(tmpl)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	// Ensure the serverUtility directory exists
	outputDir := filepath.Join(rootDir, "server", "generated")
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		log.Fatalf("Failed to create directory %s: %v", outputDir, err)
	}

	// Write the generated file to the serverUtility package
	outputPath := filepath.Join(outputDir, "generated-manifest.go")
	f, err := os.Create(outputPath)
	if err != nil {
		log.Fatalf("Failed to create generated file %s: %v", outputPath, err)
	}
	defer f.Close()

	if err := t.Execute(f, cache); err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}

	log.Println("Generated manifest cache successfully")
}
